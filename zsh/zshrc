fpath=(${HOME}/.zsh/funcs /usr/local/share/zsh-completions $fpath)

export PATH="${HOME}/bin:${PATH}"

autoload -U colors; colors
autoload zsh/terminfo

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:max-errors:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
#zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list '+' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

zstyle ':completion:*:named-directories' group-name 'named-directories'
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*:-tilde-:*' ignored-patterns '_*'

zstyle ':completion:*' special-dirs '..'
#zstyle :compinstall filename "${HOME}/.zshrc"

autoload -Uz compinit; compinit

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' max-exports 3
zstyle ':vcs_info:*' unstagedstr 'U'
zstyle ':vcs_info:*' stagedstr 'S'
zstyle ':vcs_info:*' actionformats " [%s:%b:%a]" '%R'
if [[ "4.3.9" == "${ZSH_VERSION}" ]]; then
	zstyle ':vcs_info:*' formats " %{${fg_bold[grey]}%}%1>>%s%>>[%{${fg_no_bold[green]}%}%b%{${fg_bold[grey]}%}]%{${fg_no_bold[default]}%}" '%R'
else
	zstyle ':vcs_info:*' formats " %{${fg_bold[grey]}%}%1>>%s%>>[%{${fg_no_bold[green]}%}%b%{${fg_bold[grey]}%}%c%u]%{${fg_no_bold[default]}%}" '%R' '%S'
fi

setopt COMPLETE_IN_WORD
setopt INTERACTIVE_COMMENTS
setopt LIST_PACKED
setopt EXTENDED_GLOB
setopt NO_HUP
#setopt MULTIBYTE
setopt PROMPT_SUBST

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -e

# Git-prompt
#__git_prompt_info() {
#	ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
#	echo "[${ref#refs/heads/}]"
#}

function safe-source () {
	test -f "${1}" && source "${1}"
}
function virtualenv_info () {
	[ ${VIRTUAL_ENV} ] && print " %{${fg_bold[grey]}%}env[%{${fg_no_bold[green]}%}"$(basename "${VIRTUAL_ENV}")"%{${fg_bold[grey]}%}]"
}

#bindkey -M menuselect '^o' accept-and-infer-next-history

case $HOST in
	[Ww]hite*)
		prc="yellow"
		;;
	mate|submarine|tv|*.bigfist.net|black)
		prc="magenta"
		;;
	salt|*.cs.umu.se)
		prc="cyan"
		;;
	*.acc.umu.se)
		prc="green"
		;;
	megaburken)
		prc="blue"
		;;
	*)
		prc="white"
		;;
esac

source "${HOME}/.zsh/fish-path/fish-path.zsh"

#RPROMPT="%{${fg_bold[grey]}%}%(1v.%2v@%3v:%4v.%~)%{${fg_no_bold[default]}%}"

#PROMPT="%{${fg_bold[grey]}%}[%{${fg_no_bold[green]}%}%m%{${fg_bold[grey]}%}] %{${fg_bold[white]}%}%n%{${fg_bold[grey]}%}:%{${fg_bold[green]}%}%c%{${fg_bold[grey]}%}%#%{${fg_no_bold[default]}%} "
#PROMPT="%{${fg_bold[grey]}%}[%{${fg_no_bold[$prc]}%}${HOST[1]}%{${fg_bold[grey]}%}]%{${fg_bold[white]}%}${USER[1]}%{${fg_bold[grey]}%}:%{${fg_bold[$prc]}%}%c%{${fg_bold[grey]}%}%#%{${fg_no_bold[default]}%} "

# Working directory
_PROMPT="%{${fg_bold[grey]}%}[%{${fg_no_bold[magenta]}%}"'$(path_format "%~" ${vcs_info_msg_1_} ${vcs_info_msg_2_})'"%{${fg_bold[grey]}%}]"
# vcs_info
_PROMPT="${_PROMPT}"'${vcs_info_msg_0_}'
# virtualenv_info
_PROMPT="${_PROMPT}"'$(virtualenv_info)'
# User@host
_PROMPT="${_PROMPT} %{${fg_bold[grey]}%}[%{${fg_no_bold[default]}%}%n%{${fg_bold[grey]}%}@%{${fg_no_bold[default]}%}%m%{${fg_bold[grey]}%}]%{${fg_no_bold[default]}%}"

PROMPT="%{${fg_bold[grey]}%}[%{${fg_no_bold[default]}%} "
#RPROMPT=" %{${fg_bold[grey]}%}]%{${fg_no_bold[default]}%}"

# Determine gnu-ls
ls --version >/dev/null 2>&1 && alias ls='ls --color=auto -F' || alias ls='ls -G -F'

# Rails aliases
#alias sgen="script/generate"
#alias sserv="script/server"
#alias scon="script/console"
#alias splug="script/plugin"

# Projects
p() {
	case "${1}" in
		status )
			cwd=`pwd`
			cd ${PROJDIR}
			for dir in `ls -F --sort time | grep "/$" | sed 's/.$//'`; do
				cd "${dir}"
				echo -n $dir ":: "
				git status | tail -n 1 | sed 's/(.*//'
				cd ..
			done
			cd "${cwd}"
			;;
		* )
			cd "${PROJDIR}${1}"*/
			;;
	esac
}

precmd () {
	#local get_dir branch
	vcs_info
	print -rP "${_PROMPT}"
	print -Pn "\e]0;%~\a"
	RPROMPT="${INSPROMPT}"
}

# Screen name
preexec () {
	if [[ "$TERM" == "screen" ]]; then
	local CMD=${1[(wr)^(*=*|sudo|-*)]}
	echo -ne "\ek$CMD\e\\"
	fi

	# tput cuu1
	# print -P -- "%{${fg_bold[grey]}%}[${HOST[1]}]${USER[1]}:%c%#%{${fg_no_bold[default]}%} "
}

set -o vi
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward
# Indication for insert mode
local CMDPROMPT INSPROMPT
CMDPROMPT="%{${fg_bold[red]}%}[CMD]%{${fg_no_bold[default]}%}"
#INSPROMPT="%{${bg[blue]}${fg_bold[white]}%}INS%{${bg[default]}${fg_bold[grey]}%}[%{${fg_no_bold[default]}%} "
INSPROMPT=""
zle-keymap-select() {
	if [[ ${KEYMAP} = vicmd ]] ; then
		RPROMPT="${CMDPROMPT}"
	else
		RPROMPT="${INSPROMPT}"
	fi
	() { return $__prompt_status }
	zle reset-prompt
}
zle-line-init() {
	typeset -g __prompt_status="$?"
}
zle -N zle-keymap-select
zle -N zle-line-init

safe-source "${HOME}/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
ZSH_HIGHLIGHT_STYLES[globbing]='fg=yellow'
#ZSH_HIGHLIGHT_STYLES[path]='fg=cyan'

safe-source "${HOME}/.zsh/zsh-history-substring-search/zsh-history-substring-search.zsh"
safe-source "${HOME}/.zsh/django-plugin/django.plugin.zsh"
#safe-source "${HOME}/.zsh/make-dir-complete/make-dir-complete.plugin.zsh"

typeset -A NAMED_DIRS
NAMED_DIRS=(
	note	~/Dropbox/Notes
	drop	~/Dropbox
	mill	~/Documents/Codemill
	dot	~/Documents/dotfiles
	proj	~/Documents/Projects
	edu	~/Documents/Education
)
for key in ${(k)NAMED_DIRS}
do
	if [[ -d "${NAMED_DIRS[$key]}" ]]; then
		export $key="${NAMED_DIRS[$key]}"
		: ~$key
	else
		unset "NAMED_DIRS[$key]"
	fi
done
#: ${(k)NAMED_DIRS}

function namedirs () {
	for key in ${(k)NAMED_DIRS}
	do
		printf "%-10s %s\n" "${key}" "${NAMED_DIRS[$key]}"
	done
}
