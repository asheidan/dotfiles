fpath=(${HOME}/.zsh/funcs /usr/local/share/zsh-completions $fpath)

autoload -U colors; colors
autoload zsh/terminfo

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:max-errors:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
#zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list '+' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

zstyle ':completion:*:named-directories' group-name 'named-directories'
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*:-tilde-:*' ignored-patterns '_*'

zstyle ':completion:*' special-dirs '..'
#zstyle :compinstall filename "${HOME}/.zshrc"

autoload -Uz compinit; compinit

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' max-exports 3
zstyle ':vcs_info:*' unstagedstr 'U'
zstyle ':vcs_info:*' stagedstr 'S'
zstyle ':vcs_info:*' actionformats " [%s:%b:%a]" '%R' '%S'
if [[ "4.3.9" == "${ZSH_VERSION}" ]]; then
	zstyle ':vcs_info:*' formats "%b" '%R'
else
	zstyle ':vcs_info:*' formats "%b%c%u" '%R' '%S'
fi

setopt COMPLETE_IN_WORD
setopt INTERACTIVE_COMMENTS
setopt LIST_PACKED
setopt EXTENDED_GLOB
setopt NO_HUP
#setopt MULTIBYTE
setopt PROMPT_SUBST

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -e

# Git-prompt
#__git_prompt_info() {
#	ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
#	echo "[${ref#refs/heads/}]"
#}

function safe-source () {
	test -f "${1}" && source "${1}"
}
function virtualenv_info () {
	if [ ${VIRTUAL_ENV} ]; then
		venv=$(basename "${VIRTUAL_ENV}")
		echo "${venv}"
	fi
}

#bindkey -M menuselect '^o' accept-and-infer-next-history

source "${HOME}/.zsh/fish-path/fish-path.zsh"

function wrap() {
	local wc1=$3
	local wc2=$4
	echo "%F{${wc1}}[${2}%F{${wc2}}${1}%F{${wc1}}]"
}

function render_prompt() {
	local c1="$1"
	local c2="$2"
	local c3="$3"
	local c4="$4"
	local c5="$5"

	# user@host
	local right="%F{${c2}}[%F{${c3}}%n%F{${c2}}@%F{${c4}}%m%F{${c2}}]%f%k"
	# sublevel
	right="%(2L.$(wrap %L 'L|' ${c2} ${c3}).)%v${right}"
	# bg jobs
	right="%(1j.$(wrap %j 'J|' ${c2} ${c3}).)%v${right}"
	local right_len="${#${(S%%)${(e)right}//\%(([FK]\{[0123456789]*\})|[fkuU])}}"

	# workdir
	PROMPT="%K{${c1}}%F{${2}}$(wrap $(path_format %~ ${vcs_info_msg_1_} ${vcs_info_msg_2_}) '' ${c2} ${c5})"
	local prompt_len="${#${(S%%)${(e)PROMPT}//\%(([FK]\{[0123456789]*\})|[fkuU])}}"

	# virtual environment
	local venv_info=$(virtualenv_info)
	if [[ "" != "${venv_info}" ]]; then
		venv_prompt=" "$(wrap ${venv_info} 'e|' ${c2} ${c3})
		venv_prompt_len="${#${(S%%)${(e)venv_prompt}//\%(([FK]\{[0123456789]*\})|[fkuU])}}"
		if [[ $((${prompt_len} + ${right_len} + ${venv_prompt_len})) -lt ${COLUMNS} ]]; then
			PROMPT="${PROMPT}${venv_prompt}"
			prompt_len="${#${(S%%)${(e)PROMPT}//\%(([FK]\{[0123456789]*\})|[fkuU])}}"
		fi
	fi
	
	# vcs-status
	if [[ "" != "${vcs_info_msg_0_}" ]]; then
		vcs_prompt=" "$(wrap $(path_format ${vcs_info_msg_0_}) 'g|' ${c2} ${c3})
		vcs_prompt_len="${#${(S%%)${(e)vcs_prompt}//\%(([FK]\{[0123456789]*\})|[fkuU])}}"
		if [[ $((${prompt_len} + ${right_len} + ${vcs_prompt_len})) -lt ${COLUMNS} ]]; then
			PROMPT="${PROMPT}${vcs_prompt}"
			prompt_len="${#${(S%%)${(e)PROMPT}//\%(([FK]\{[0123456789]*\})|[fkuU])}}"
		fi
	fi


	PROMPT="${PROMPT}${(l.($COLUMNS - $prompt_len - $right_len - 1).. .)}${right}
"
}

#PROMPT="${_PROMPT}%k%f
#"
#RPROMPT=" %{${fg_bold[grey]}%}]%{${fg_no_bold[default]}%}"

# Determine gnu-ls
ls --version >/dev/null 2>&1 && alias ls='ls --color=auto -F' || alias ls='ls -G -F'

export EDITOR="vim"

precmd () {
	#local get_dir branch
	vcs_info
	#print -rP "${_PROMPT}"
	print -Pn "\e]0;%~ %n@%m\a"
	#PROMPT="${INSPROMPT}"
	render_prompt 64 70 76 82 255
}

# Screen name
preexec () {
	if [[ "$TERM" == "screen" ]]; then
		local CMD=${1[(wr)^(*=*|sudo|-*)]}
		echo -ne "\ek$CMD\e\\"
	fi
}

set -o vi
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward
bindkey -a u undo
bindkey -a '^R' redo
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char

#CMDPROMPT='%K{25}%F{31}[%f%F{37}%f%F{255}$(path_format %~ ${vcs_info_msg_1_} ${vcs_info_msg_2_})%f%F{31}]%f%k '
#INSPROMPT='%K{64}%F{70}[%f%F{76}%f%F{255}$(path_format %~ ${vcs_info_msg_1_} ${vcs_info_msg_2_})%f%F{70}]%f%k '

# Indication for insert mode
zle-keymap-select() {
	if [[ ${KEYMAP} = vicmd ]] ; then
		#PROMPT="${CMDPROMPT}"
		render_prompt 25 31 37 43 255
	else
		#PROMPT="${INSPROMPT}"
		render_prompt 64 70 76 82 255
	fi
	() { return $__prompt_status }
	zle reset-prompt
}
zle-line-init() {
	typeset -g __prompt_status="$?"
}
zle -N zle-keymap-select
zle -N zle-line-init

safe-source "${HOME}/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
ZSH_HIGHLIGHT_STYLES[globbing]='fg=yellow'
#ZSH_HIGHLIGHT_STYLES[path]='fg=cyan'

safe-source "${HOME}/.zsh/zsh-history-substring-search/zsh-history-substring-search.zsh"
safe-source "${HOME}/.zsh/django-plugin/django.plugin.zsh"
#safe-source "${HOME}/.zsh/make-dir-complete/make-dir-complete.plugin.zsh"

cdpath=(~ ~/Documents/Codemill ~/Documents/Projects)
