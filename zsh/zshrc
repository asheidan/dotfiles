fpath=(${HOME}/.zsh/funcs /usr/local/share/zsh-completions /usr/local/share/zsh/site-functions $fpath)

autoload -U colors; colors
autoload zsh/terminfo

zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:max-errors:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
#zstyle ':completion:*' group-name ''
zstyle ':completion:*:default' list-colors 'li=01;35:di=1;34'
#zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list '+' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s

zstyle ':completion:*:named-directories' group-name 'named-directories'
zstyle ':completion:*:named-directories' list-colors '=*=1;34'
zstyle ':completion:*:commands' list-colors '=*=1;32'
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*:-tilde-:*' ignored-patterns '_*'

zstyle ':completion:*' special-dirs '..'
#zstyle :compinstall filename "${HOME}/.zshrc"

autoload -Uz compinit; compinit

# autoload -Uz vcs_info
# zstyle ':vcs_info:*' enable git svn
# zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:*' max-exports 3
# zstyle ':vcs_info:*' unstagedstr 'U'
# zstyle ':vcs_info:*' stagedstr 'S'
# zstyle ':vcs_info:*' actionformats " [%s:%b:%a]" '%R' '%S'
# if [[ "4.3.9" == "${ZSH_VERSION}" ]]; then
# 	zstyle ':vcs_info:*' formats "%b" '%R'
# else
# 	zstyle ':vcs_info:*' formats "%b%c%u" '%R' '%S'
# fi

setopt COMPLETE_IN_WORD
setopt INTERACTIVE_COMMENTS
setopt LIST_PACKED
setopt EXTENDED_GLOB
setopt NO_HUP
#setopt MULTIBYTE


setopt HIST_IGNORE_SPACE
setopt HIST_IGNORE_DUPS
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS
setopt SHARE_HISTORY

HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=5000
bindkey -e

# Git-prompt
#__git_prompt_info() {
#	ref=$(git-symbolic-ref HEAD 2> /dev/null) || return
#	echo "[${ref#refs/heads/}]"
#}

function safe-source () {
	test -f "${1}" && source "${1}"
}

#bindkey -M menuselect '^o' accept-and-infer-next-history

#source "${HOME}/.zsh/fish-path/fish-path.zsh"

# Determine gnu-ls
ls --version >/dev/null 2>&1 && alias ls='ls --color=auto -F' || alias ls='ls -G -F'
which tree >/dev/null 2>&1 && alias tree='tree -C'

which todo.sh >/dev/null 2>&1 && alias t='todo.sh'

export EDITOR="vim"

precmd () {
	print -Pn "\e]0;%~ %n@%m\a"

	if [ $timer ]; then
		timer_show=$(($SECONDS - $timer))
		if [ $timer_show -gt 10 ]; then
			print "\e[1;30mTook ${timer_show} seconds\e[0m"
		fi
		unset timer
	fi

	print "\e[1;37m________________________________________________________________________________\e[0m"
	prompt-info
}

# Screen name
preexec () {
	if [[ "$TERM" == "screen" ]]; then
		local CMD=${1[(wr)^(*=*|sudo|-*)]}
		echo -ne "\ek$CMD\e\\"
	fi
	timer=${timer:-$SECONDS}
}

set -o vi
export KEYTIMEOUT=1
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward
bindkey -a u undo
bindkey -a '^R' redo
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char

PROMPT=""

# Indication for insert mode
select_prompt() {
	if [[ ${KEYMAP} = vicmd ]] ; then
		PROMPT="${CMDPROMPT}"
	else
		PROMPT="${INSPROMPT}"
	fi
}
zle-keymap-select() {
	() { return $__prompt_status }
	# select_prompt
	zle reset-prompt
}
zle-line-init() {
	typeset -g __prompt_status="$?"
}
zle -N zle-keymap-select
zle -N zle-line-init

autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line


cdpath=(~ ~/Documents/Codemill ~/Documents/Projects)


safe-source "${HOME}/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=64

#safe-source "${HOME}/.zsh/django-plugin/django.plugin.zsh"
#safe-source "${HOME}/.zsh/make-dir-complete/make-dir-complete.plugin.zsh"


safe-source "${HOME}/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
#ZSH_HIGHLIGHT_STYLES[globbing]='fg=yellow'
#ZSH_HIGHLIGHT_STYLES[path]='fg=cyan'

# Substring search needs to be after syntax highlight
safe-source "${HOME}/.zsh/zsh-history-substring-search/zsh-history-substring-search.zsh"
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

which ranger &> /dev/null && {
	function ranger-cd {
		tempfile="$(mktemp -t tmp.XXXXXX)"
		/usr/local/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
		test -f "$tempfile" &&
			if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
				cd -- "$(cat "$tempfile")"
			fi
		rm -f -- "$tempfile"
	}

	bindkey -s '^O' 'ranger-cd\n'
}

which fzf &> /dev/null && {
	[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
	export FZF_DEFAULT_OPTS="--inline-info --color='light,marker:5,pointer:4,prompt:4,hl:5,hl+:5,info:2,spinner:3'"

	ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(reset-prompt)
	function _is_in_git_repo() {
		git rev-parse HEAD > /dev/null 2>&1
	}
	function _fzf () {
		fzf --height 50% "$@"
	}

	function join-lines() {
		local item
		while read item; do
			echo -n "${(q)item} "
		done
	}

	function _gt() {
		_is_in_git_repo || return
		git tag --sort -version:refname |
			_fzf --multi --preview-window right:70% \
				 --preview 'git show --color=always {} | head -'$LINES
	}
	function _fzf-gt-widget() { local result=$(_gt | join-lines); zle reset-prompt; LBUFFER+=$result }
	zle -N _fzf-gt-widget
	ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(_fzf-gt-widget)
	bindkey '^X^G^T' _fzf-gt-widget

	function _gb() {
		_is_in_git_repo || return
		git branch -a --color=always | grep -v '/HEAD\s' | sort |
			_fzf --ansi --multi --tac --preview-window right:70% \
				 --preview 'git log --color=always --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
			sed 's/^..//' | cut -d' ' -f1 |
			sed 's#^remotes/##'
	}
	function _fzf-gb-widget() { local result=$(_gb | join-lines); zle reset-prompt; LBUFFER+=$result }
	zle -N _fzf-gb-widget
	ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(_fzf-gb-widget)
	bindkey '^X^G^B' _fzf-gb-widget

	# function flezz() {
	# 	local header
	# 	while getopts ":n:" o; do
	# 		case "${o}" in
	# 			'n')
	# 				header=${OPTARG}
	# 				;;
	# 			':')
	# 				case "${OPTARG}" in
	# 					n)
	# 						header=1
	# 						;;
	# 				esac
	# 				;;
	# 		esac
	# 	done
	# 	shift $((OPTIND-1))
	#
	# 	echo fzf ${header:+--header-lines="${header}"} "$@"
	# }

	function fzpass() {
		(
			set -e
			set -o pipefail

			cd "${PASSWORD_STORE_DIR:-${HOME}/.password-store}"

			find * -type f -name '*.gpg' | sed -e 's/\.gpg$//' | fzf --header="Password Store" | xargs pass "$@"
		)
	}
}
