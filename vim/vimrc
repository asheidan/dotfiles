" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2002 Sep 19
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  ""set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

  autocmd BufWinLeave *.otl mkview
  autocmd BufWinEnter *.otl silent loadview
  "autocmd BufWinLeave *.otl write

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")


" Added by myself
"set noexpandtabs

" Smart indenting, based on the typed code.
set smartindent 

" Soft word wrap
set formatoptions+=l
set lbr

" Tab spacing.
set tabstop=3 
set shiftwidth=3 " same
set softtabstop=3 " same

"set background=light
" highlight LineNr        guifg=#DDEEFF ctermfg=DarkGrey
" highlight VertSplit		ctermbg=Black ctermfg=White
" highlight Folded			ctermbg=Black ctermfg=DarkGrey
"call s:hibg("LineNr"    ,"#222222","DarkBlue",80)
"colorscheme vividchalk
"set enc=utf-8

" MiniBufExplore
" let g:miniBufExplMapWindowNavVim = 1 
" let g:miniBufExplMapWindowNavArrows = 1 
" let g:miniBufExplMapCTabSwitchBufs = 1 
" let g:miniBufExplModSelTarget = 1 

" Write before :make
set autowrite

let NERDTreeSortDirs = 1
let NERDTreeIgnore = ['\~$', '\.class$','\.aux$','\.dvi$','\.tmproj$']

" map <F2> to toggle NERDTree window
nmap <silent> <F2> :NERDTreeToggle<CR>

nmap <silent> <F3> :set nu!<CR>
nmap <silent> <F4> :call ToggleHLSearch()<CR>
nmap <silent> <F5> :make<CR>

let VCSCommandGitExec = '/opt/local/bin/git'

set foldmethod=marker

" Toggle Make and SCons
nmap <silent> t<F5> :call ToggleScons()<CR>
function ToggleScons()
	if &makeprg=='make'
		set makeprg=scons
		echo "SCons set as builder"
	else
		set makeprg=make
		echo "Make set as builder"
	endif
endfunction
au BufNewFile,BufRead SCons* set filetype=scons

" Adding quickfixsupport for java
autocmd BufRead *.java set makeprg=ant
autocmd BufRead *.java set efm=%A\ %#[javac]\ %f:%l:\ %m,%-Z\ %#[javac]\ %p^,%-C%.%#

" Terminal window title
set title

" Searching
set ignorecase
set smartcase

function ToggleHLSearch()
       if &hls
            set nohls
       else
            set hls
       endif
endfunction

" Completing
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" Background buffers
set hidden

"let mapleader = ","

" Tab-complete menu
set wildmenu

" Spelling
if has("spell")
  " turn spelling on by default
  set nospell
  set spelllang=sv
  " toggle spelling with F4 key
  map <F6> :set spell!<CR><Bar>:echo "Spell Check: " . strpart("OffOn", 3 * &spell, 3)<CR>
  " they were using white on white
  highlight PmenuSel ctermfg=black ctermbg=lightgray
  " limit it to just the top 10 items
  set sps=best,10                    
endif

" Format statusbar
" cf the default statusline: %<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
" format markers:
"   %< truncation point
"   %n buffer number
"   %f relative path to file
"   %t file name
"   %m modified flag [+] (modified), [-] (unmodifiable) or nothing
"   %r readonly flag [RO]
"   %y filetype [ruby]
"   %= split point for left and right justification
"   %-35. width specification
"   %l current line number
"   %L number of lines in buffer
"   %c current column number
"   %V current virtual column number (-n), if different from %c
"   %v ?
"   %P percentage through buffer
"   %) end of width specification
set statusline=%<%.40f%m%r%h%w%=\ %y[%{&makeprg}]\ (%{&encoding},%{&ff},%{&ts})\ %6.(%l%),%-5.(%c%V%)\ [%P]
set laststatus=2
