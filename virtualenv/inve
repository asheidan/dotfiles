#!/usr/bin/python
'''
usage:  $0 [COMMAND [ARG ...]]
    or:  eval \`$0 -s\` # sh, bash, zsh, dash
    or:  eval \`$0 -c\` # csh, tcsh
    or:  eval $0 -f # fish
Launch COMMAND with ARGs, or the default shell, in the "activated"
virtual environment. Or, print shell statements that, if evaluated,
would cause the current environment to become activated.

The shell language to be used is selected by one of the following
options:
    -s, --shell=sh        Bourne-shell
    -c, --shell=csh       C-shell
    -f, --shell=fish      Fish shell

Examples:
    $0                    Launch $SHELL with a modified \$PATH
    $0 screen             Launch screen with a modified \$PATH
    $0 pip install abc    Install 'abc' using the pip inside this venv
    eval \`$0 -s\`          If using bash, modify \$PATH in your current environment

"Activating" doesn't mean much; only that the PATH and VIRTUAL_ENV
environment variables have been modified appropriately. If you employ
the full path to the executables in \$VIRTUAL_ENV/bin, you might eschew
this script altogether.

'''

import os, sys

from os.path import abspath, dirname, join as pathjoin

shell_msg = ("Launching subshell in virtual environment. Type 'exit' or "
             "'Ctrl+D' to return.")


# VIRTUAL_ENV = '/Users/emil/Documents/Codemill/P4C/env-P4C'
VIRTUAL_ENV = abspath(pathjoin(dirname(__file__),'..'))
BIN_NAME = 'bin'

shellcommands = {
    'sh': {
        'set': 'export %(key)s="%(value)s";',
        'del': 'unset %(key)s;',
        'rehash': 'hash -r;',
    },
    'csh': {
        'set': 'setenv %(key)s "%(value)s";',
        'del': 'unset %(key)s;',
        'rehash': 'rehash;',
    },
    'fish': {
        'set': 'set -gx %(key)s "%(value)s";',
        'del': 'set -e %(key)s;',
        'rehash': '',
    }
}

def activate():
    '''Activates the venv by modifying the current environment.'''
    os.environ['VIRTUAL_ENV'] = VIRTUAL_ENV
    os.environ['PATH'] = os.pathsep.join([
            os.path.join(os.environ['VIRTUAL_ENV'], BIN_NAME),
            os.environ['PATH'],
        ])
    try:
        del os.environ['PYTHONHOME']
    except KeyError:
        pass

def print_deactivate_commands(shell):
    for k in ['PATH', 'PYTHONHOME', 'PS1']:
        if '_OLD_VIRTUAL_%s' % k in os.environ:
            print(shellcommands[shell]['set'] % dict(
                key=k, value=os.environ['_OLD_VIRTUAL_%s' % k]))
            print(shellcommands[shell]['del'] % dict(
                key='_OLD_VIRTUAL_%s' % k))

def print_backup_commands(shell):
    for k in ['PATH', 'PYTHONHOME', 'PS1']:
        if k in os.environ and not '_OLD_VIRTUAL_%s' % k in os.environ:
            print(shellcommands[shell]['set'] % dict(
                key='_OLD_VIRTUAL_%s' % k, value=os.environ[k]))

def print_activate_commands(shell):
    for k in ['PATH', 'PS1']:
        if k in os.environ:
            print(shellcommands[shell]['set'] % dict(
                key=k, value=os.environ[k]))
    print(shellcommands[shell]['del'] % dict(key='PYTHONHOME'))
    print(shellcommands[shell]['rehash'])

def invoke(args=[]):
    '''Launch a subcommand given by 'args', or the user's preferred shell.'''
    if args:
        os.execvp(args[0], args)
    else:
        sys.stderr.write('%s\n' % shell_msg)
        os.execvp(os.environ['SHELL'], [os.environ['SHELL']])

def usage(argv0, msg=''):
    '''Return a usage string with an optional message'''
    return msg + '\n' if msg else '' + __doc__.strip().replace('$0', argv0)

def main(argv):
    '''Process args and dispatch.'''
    argv0 = argv.pop(0)

    if argv and argv[0].startswith('-'):
        option = argv.pop(0)

        if option in ['-h', '--help']:
            return usage(argv0)

        if option in ['-s', '--shell=sh']:
            shell = 'sh'
        elif option in ['-c', '--shell=csh']:
            shell = 'csh'
        elif option in ['-f', '--shell=fish']:
            shell = 'fish'
        else:
            return usage(argv0, "Unknown option.")
        
        if argv0.endswith('deactivate'):
            print_deactivate_commands(shell)
        else:
            print_backup_commands(shell)
            activate()
            print_activate_commands(shell)
    else:
        activate()
        return invoke(argv)

if __name__ == '__main__':
   raise SystemExit(main(sys.argv))

